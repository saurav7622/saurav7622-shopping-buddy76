{"id":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","dependencies":[{"name":"C:\\Users\\91834\\Desktop\\ShoppingBuddy\\package.json","includedInParent":true,"mtime":1624360771024},{"name":"C:\\Users\\91834\\Desktop\\ShoppingBuddy\\node_modules\\unbzip2-stream\\package.json","includedInParent":true,"mtime":1549638602000}],"generated":{"js":"var BITMASK = [0, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF];\n\n// returns a function that reads bits.\n// takes a buffer iterator as input\nmodule.exports = function bitIterator(nextBuffer) {\n    var bit = 0, byte = 0;\n    var bytes = nextBuffer();\n    var f = function(n) {\n        if (n === null && bit != 0) {  // align to byte boundary\n            bit = 0\n            byte++;\n            return;\n        }\n        var result = 0;\n        while(n > 0) {\n            if (byte >= bytes.length) {\n                byte = 0;\n                bytes = nextBuffer();\n            }\n            var left = 8 - bit;\n            if (bit === 0 && n > 0)\n                f.bytesRead++;\n            if (n >= left) {\n                result <<= left;\n                result |= (BITMASK[left] & bytes[byte++]);\n                bit = 0;\n                n -= left;\n            } else {\n                result <<= n;\n                result |= ((bytes[byte] & (BITMASK[n] << (8 - n - bit))) >> (8 - n - bit));\n                bit += n;\n                n = 0;\n            }\n        }\n        return result;\n    };\n    f.bytesRead = 0;\n    return f;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/unbzip2-stream/lib/bit_iterator.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}}],"sources":{"../../node_modules/unbzip2-stream/lib/bit_iterator.js":"var BITMASK = [0, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF];\n\n// returns a function that reads bits.\n// takes a buffer iterator as input\nmodule.exports = function bitIterator(nextBuffer) {\n    var bit = 0, byte = 0;\n    var bytes = nextBuffer();\n    var f = function(n) {\n        if (n === null && bit != 0) {  // align to byte boundary\n            bit = 0\n            byte++;\n            return;\n        }\n        var result = 0;\n        while(n > 0) {\n            if (byte >= bytes.length) {\n                byte = 0;\n                bytes = nextBuffer();\n            }\n            var left = 8 - bit;\n            if (bit === 0 && n > 0)\n                f.bytesRead++;\n            if (n >= left) {\n                result <<= left;\n                result |= (BITMASK[left] & bytes[byte++]);\n                bit = 0;\n                n -= left;\n            } else {\n                result <<= n;\n                result |= ((bytes[byte] & (BITMASK[n] << (8 - n - bit))) >> (8 - n - bit));\n                bit += n;\n                n = 0;\n            }\n        }\n        return result;\n    };\n    f.bytesRead = 0;\n    return f;\n};\n"},"lineCount":40}},"error":null,"hash":"61a447e20555435c88d5651105eacd4a","cacheData":{"env":{}}}